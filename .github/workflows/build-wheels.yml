name: Build wheels

on:
  push:
    branches: [ develop ]
  pull_request:
    branches: [ develop ]
  schedule:
    - cron: '0 0 * * sun,wed'

jobs:
  build:
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.6, 3.7, 3.8, 3.9]
        os: [ubuntu-latest, macos-latest, windows-latest]
        platform: [x64]
        include:
        #
        # We want the _oldest_ possible manylinux version to ensure our
        # wheels work on the widest possible range of distros.  Version 1
        # seems to break for certain Python versions under Linux and Windows,
        # so we use 2010, which is the next oldest.
        #
        # When selecting the numpy version to build against, we need to satisfy
        # two conditions.  First, we want the wheel to be available for the
        # version of Python we're building against, because building numpy
        # wheels on our own is too much work.
        #
        # Second, in order to guarantee compatibility with the greatest range
        # of numpy versions, we want to build against the oldest possible numpy
        # version, as long as it's 1.17.0 or newer.  Building versions earlier
        # than 1.17.0 yields wheels that are incompatible with some newer
        # versions of numpy.  See https://github.com/RaRe-Technologies/gensim/issues/3226
        # for details.
        #
        # The logic for numpy version selection is based on
        # https://github.com/scipy/oldest-supported-numpy/blob/master/setup.cfg
        # with the exception that we enforce the minimum version to be 1.17.0.
        #
        - os: ubuntu-latest
          manylinux-version: 2010
          python-version: 3.6
          build-depends: numpy==1.17.0

        - os: ubuntu-latest
          manylinux-version: 2010
          python-version: 3.7
          build-depends: numpy==1.17.0

        - os: ubuntu-latest
          manylinux-version: 2010
          python-version: 3.8
          build-depends: numpy==1.17.3

        - os: ubuntu-latest
          manylinux-version: 2010
          python-version: 3.9
          build-depends: numpy==1.19.3

        - os: macos-latest
          travis-os-name: osx
          manylinux-version: 1
          python-version: 3.6
          build-depends: numpy==1.17.0

        - os: macos-latest
          travis-os-name: osx
          manylinux-version: 1
          python-version: 3.7
          build-depends: numpy==1.17.0

        - os: macos-latest
          travis-os-name: osx
          manylinux-version: 1
          python-version: 3.8
          build-depends: numpy==1.17.3

        - os: macos-latest
          travis-os-name: osx
          manylinux-version: 1
          python-version: 3.9
          build-depends: numpy==1.19.3

        - os: windows-latest
          manylinux-version: 2010
          python-version: 3.6
          build-depends: numpy==1.17.0

        - os: windows-latest
          manylinux-version: 2010
          python-version: 3.7
          build-depends: numpy==1.17.0

        - os: windows-latest
          manylinux-version: 2010
          python-version: 3.8
          build-depends: numpy==1.17.3

        - os: windows-latest
          manylinux-version: 2010
          python-version: 3.9
          build-depends: numpy==1.19.3

    env:
      PKG_NAME: gensim
      REPO_DIR: gensim
      BUILD_COMMIT: HEAD
      PLAT: x86_64
      UNICODE_WIDTH: 32
      MB_PYTHON_VERSION: ${{ matrix.python-version }} # MB_PYTHON_VERSION is needed by Multibuild
      TEST_DEPENDS: Morfessor==2.0.2a4 python-levenshtein==0.12.0 visdom==0.1.8.9 pytest pytest-cov mock cython nmslib pyemd testfixtures scikit-learn pyemd
      DOCKER_TEST_IMAGE: multibuild/xenial_x86_64
      TRAVIS_OS_NAME: ${{ matrix.travis-os-name }}
      SKIP_NETWORK_TESTS: 1
      MB_ML_VER: ${{ matrix.manylinux-version }}
      WHEELHOUSE_UPLOADER_USERNAME: ${{ secrets.AWS_ACCESS_KEY_ID }}
      WHEELHOUSE_UPLOADER_SECRET: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      BUILD_DEPENDS: ${{ matrix.build-depends }}

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive
        fetch-depth: 0
    - name: Print environment variables
      run: |
        echo "PLAT: ${PLAT}"
        echo "MB_ML_VER: ${MB_ML_VER}"
        echo "DOCKER_TEST_IMAGE: ${DOCKER_TEST_IMAGE}"
        echo "TEST_DEPENDS: ${TEST_DEPENDS}"
        echo "TRAVIS_OS_NAME: ${TRAVIS_OS_NAME}"
        echo "SKIP_NETWORK_TESTS: ${SKIP_NETWORK_TESTS}"
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install virtualenv
    - name: Build and Install Wheels (Multibuild)
      if: matrix.os != 'windows-latest'
      run: |
        echo ::group::Set up Multibuild
        source multibuild/common_utils.sh
        source multibuild/travis_steps.sh
        source config.sh
        echo ::endgroup::
        echo ::group::Before install
        before_install
        echo ::endgroup::
        echo ::group::Build wheel
        build_wheel $REPO_DIR ${{ matrix.PLAT }}
        echo ::endgroup::
        echo ::group::Install run
        install_run ${{ matrix.PLAT }}
        echo ::endgroup::
    #
    # We can't use multibuild on Windows, so we have to roll our own build script.
    # Adapted from
    # https://github.com/RaRe-Technologies/gensim-wheels/commit/084b863390edee05bbe15d4ec05d1ab726e52202
    #
    - name: Build and Install Wheels (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        echo ::group::Set up dependencies
        python --version
        python -c "import struct; print(struct.calcsize('P') * 8)"

        python -m pip install -U pip setuptools wheel wheelhouse_uploader ${{ env.BUILD_DEPENDS }}
        echo ::endgroup::

        echo ::group::Build wheel
        python setup.py bdist_wheel
        echo ::endgroup

        echo ::group::Install run
        ls dist
        python continuous_integration/install_wheel.py
        echo ::endgroup::

        #
        # For consistency with the multibuild step.
        #
        mv dist wheelhouse

    - name: Upload wheels to s3://gensim-wheels
      #
      # Only do this if the credentials are set.
      # This means that PRs will still build wheels, but not upload them.
      # (PRs do not have access to secrets).
      #
      # The always() ensures this step runs even if a previous step fails.
      # We want to upload wheels whenever possible (even if e.g. tests failed)
      # because we don't want an innocuous test failure from blocking a release.
      #
      if: ${{ always() && env.WHEELHOUSE_UPLOADER_USERNAME && env.WHEELHOUSE_UPLOADER_SECRET }}
      run: |
        pip install wheelhouse-uploader
        ls wheelhouse/*.whl
        python -m wheelhouse_uploader upload --local-folder wheelhouse/ --no-ssl-check gensim-wheels --provider S3 --no-enable-cdn
