name: Tests
on:
  push:
    branches: [ develop ]
  pull_request:
    branches: [ develop ]

jobs:
  tests:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: false
      matrix:
        include:
          - {name: Linux, python: 3.6, os: ubuntu-20.04, tox: 'flake8,flake8-docs'}
          - {name: Linux, python: 3.6, os: ubuntu-20.04, tox: 'py36-linux'}
          - {name: Linux, python: 3.7, os: ubuntu-20.04, tox: 'py37-linux'}
          - {name: Linux, python: 3.8, os: ubuntu-20.04, tox: 'py38-linux'}
    env:
      TOX_PARALLEL_NO_SPINNER: 1

    steps:
      - uses: actions/checkout@v2
      - name: Setup up Python ${{ matrix.python }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python }}
      - name: Update pip
        run: python -m pip install -U pip

      #
      # Work-around mysterious build problem
      # https://github.com/RaRe-Technologies/gensim/pull/3078/checks?check_run_id=2117914443
      # https://www.scala-sbt.org/1.x/docs/Installing-sbt-on-Linux.html
      #
      - name: Update sbt
        run: |
          echo "deb https://dl.bintray.com/sbt/debian /" | sudo tee -a /etc/apt/sources.list.d/sbt.list
          curl -sL "https://keyserver.ubuntu.com/pks/lookup?op=get&search=0x2EE0EA64E40A89B84B2DF73499E82A75642AC823" | sudo apt-key add
          sudo apt-get update -y
          sudo apt-get install -y sbt
      - name: Install tox, gdb
        run: |
          pip install tox
          sudo apt-get update -y
          sudo apt-get install -y gdb
      - name: Enable core dumps
        run: ulimit -c unlimited -S  # enable core dumps
      - name: Run tox tests
        run: tox -e ${{ matrix.tox }}
      - name: Collect corefile
        if: ${{ failure() }}
        run: |
          pwd
          COREFILE=$(find . -maxdepth 1 -name "core*" | head -n 1)
          if [[ -f "$COREFILE" ]]; then EXECFILE=$(gdb -c "$COREFILE" -batch | grep "Core was generated" | tr -d "\`" | cut -d' ' -f5); file "$COREFILE"; gdb -c "$COREFILE" "$EXECFILE" -x continuous_integration/debug.gdb -batch; fi
