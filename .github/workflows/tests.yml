name: Tests
on:
  push:
    branches: [ develop ]
  pull_request:
    branches: [ develop ]

jobs:
  linters:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Setup up Python ${{ matrix.python }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python }}

      - name: Update pip
        run: python -m pip install -U pip

      - name: Install dependencies
        run: python -m pip install flake8 flake8-rst

      - name: Run flake8 linter (source)
        run: flake8 --ignore E12,W503 --max-line-length 120 --show-source gensim

      # - name: Run flake8 linter (documentation)
      #   run: flake8 --ignore E202,E402,E302,E305,F821 --max-line-length 120 --filename '*.py,*.rst' docs

  tests:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: false
      matrix:
        include:
          # - {name: Linux, python: 3.7, os: ubuntu-20.04}
          # - {name: Linux, python: 3.8, os: ubuntu-20.04}
          - {name: Linux, python: 3.9, os: ubuntu-20.04}
          - {name: Linux, python: '3.10', os: ubuntu-20.04, coverage: true}
          # - {name: Windows, python: 3.7, os: windows-2019}
          # - {name: Windows, python: 3.8, os: windows-2019}
          # - {name: Windows, python: 3.9, os: windows-2019}
          - {name: Windows, python: '3.10', os: windows-2019}

    #
    # Don't run this job unless the linters have succeeded.
    # It's wasteful to test code that failed to lint, because it'll get
    # re-tested once the lint errors are fixed.
    #
    needs: [linters]

    steps:
      - uses: actions/checkout@v2
      - name: Setup up Python ${{ matrix.python }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python }}
      - name: Update pip
        run: python -m pip install -U pip

      - name: Install requirements
        run: python -m pip install -r .github/workflows/requirements.txt

      #
      # Work-around mysterious build problem
      # https://github.com/RaRe-Technologies/gensim/pull/3078/checks?check_run_id=2117914443
      # https://www.scala-sbt.org/1.x/docs/Installing-sbt-on-Linux.html
      #
      - name: Update sbt
        if: matrix.os == 'ubuntu-20.04'
        run: |
          echo "deb https://repo.scala-sbt.org/scalasbt/debian all main" | sudo tee /etc/apt/sources.list.d/sbt.list
          echo "deb https://repo.scala-sbt.org/scalasbt/debian /" | sudo tee /etc/apt/sources.list.d/sbt_old.list
          curl -sL "https://keyserver.ubuntu.com/pks/lookup?op=get&search=0x2EE0EA64E40A89B84B2DF73499E82A75642AC823" | sudo apt-key add
          sudo apt-get update -y
          sudo apt-get install -y sbt

      - name: Install GDB & enable core dumps
        if: matrix.os == 'ubuntu-20.04'
        run: |
          sudo apt-get update -y
          sudo apt-get install -y gdb
          ulimit -c unlimited -S  # enable core dumps

      - name: Build
        run: |
          python --version
          pip --version
          python setup.py build_ext --inplace

      - name: Run tests (without coverage)
        if: matrix.coverage != true
        run: pytest gensim/test

      - name: Run tests (with coverage)
        if: matrix.coverage == true
        run: pytest gensim/test --cov=gensim/ --cov-report=xml

      - name: Upload coverage to Codecov
        if: matrix.coverage == true
        uses: codecov/codecov-action@v2
        with:
          fail_ci_if_error: true
          files: ./coverage.xml
          verbose: true

      - name: Collect corefile
        if: ${{ failure() }} && matrix.os == 'ubuntu-20.04'
        run: |
          pwd
          COREFILE=$(find . -maxdepth 1 -name "core*" | head -n 1)
          if [[ -f "$COREFILE" ]]; then EXECFILE=$(gdb -c "$COREFILE" -batch | grep "Core was generated" | tr -d "\`" | cut -d' ' -f5); file "$COREFILE"; gdb -c "$COREFILE" "$EXECFILE" -x continuous_integration/debug.gdb -batch; fi
